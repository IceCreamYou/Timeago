<?php

/**
 * @file
 *   Adds support for the Timeago jQuery library.
 */

define('TIMEAGO_LIBRARY_WEBSITE', 'http://timeago.yarp.com/');
define('TIMEAGO_LIBRARY_FILENAME', 'jquery.timeago.js');
define('TIMEAGO_LIBRARY_DOWNLOAD_URL', 'http://timeago.yarp.com/jquery.timeago.js');
define('TIMEAGO_FORMAT_SHORT_US', '<\s\p\a\n \c\l\a\s\s="\t\i\m\e\a\g\o" \t\i\t\l\e="c">n/j/y - g:ia</\s\p\a\n>');
define('TIMEAGO_FORMAT_SHORT', '<\s\p\a\n \c\l\a\s\s="\t\i\m\e\a\g\o" \t\i\t\l\e="c">d/m/Y - H:i</\s\p\a\n>');
define('TIMEAGO_FORMAT_MEDIUM_US', '<\s\p\a\n \c\l\a\s\s="\t\i\m\e\a\g\o" \t\i\t\l\e="c">D, n/j/Y - g:ia</\s\p\a\n>');
define('TIMEAGO_FORMAT_MEDIUM', '<\s\p\a\n \c\l\a\s\s="\t\i\m\e\a\g\o" \t\i\t\l\e="c">D, d/m/Y - H:i</\s\p\a\n>');
define('TIMEAGO_FORMAT_LONG_US', '<\s\p\a\n \c\l\a\s\s="\t\i\m\e\a\g\o" \t\i\t\l\e="c">l, F j, Y - g:ia</\s\p\a\n>');
define('TIMEAGO_FORMAT_LONG', '<\s\p\a\n \c\l\a\s\s="\t\i\m\e\a\g\o" \t\i\t\l\e="c">l, j F Y - H:i</\s\p\a\n>');

/**
 * Converts a timestamp into a Timeago date.
 *
 * @param $timestamp
 *   A UNIX timestamp.
 * @param $date
 *   (Optional) A human-readable date (will be displayed if JS is disabled).
 *   If not provided, the site default date format is used.
 * @return
 *   HTML representing a Timeago-friendly date.
 */
function timeago_format_date($timestamp, $date = NULL) {
  // Add the Timeago JS.
  timeago_add_js();
  // The fallback date isn't set, so we have to generate it ourselves.
  if (!isset($date)) {
    // If the date format is already set to Timeago, we need to set it to
    // something else or we'll end up with two timeago wrappers.
    $date_format_medium = variable_get('date_format_medium', 'D, m/d/Y - H:i');
    if ($date_format_medium == TIMEAGO_FORMAT_MEDIUM_US) {
      $date_format_medium = 'D, n/j/Y - g:ia';
    }
    elseif ($date_format_medium == TIMEAGO_FORMAT_MEDIUM) {
      $date_format_medium = 'D, d/m/Y - H:i';
    }
    else {
      $date = format_date($timestamp, 'custom', $date_format_medium);
    }
  }
  // If the date passed in is already a Timeago date, just return that.
  elseif (strpos($date, 'class="timeago"') !== FALSE) {
    return $date;
  }
  // Construct the Timeago element.
  $elem = variable_get('timeago_elem', 'span');
  $time = format_date($timestamp, 'custom', 'c');
  if ($elem == 'time') {
    return '<time class="timeago" datetime="' . $time . '">' . $date . '</time>';
  }
  else {
    return '<' . $elem . ' class="timeago" title="' . $time . '">' . $date . '</abbr>';
  }
  return $date;
}

/**
 * Implements hook_menu().
 */
function timeago_menu() {
  $items = array();
  $items['admin/config/user-interface/timeago'] = array(
    'title' => 'Timeago',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('timeago_admin'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Allows administrators to adjust settings for timeago.',
  );
  return $items;
}

/**
 * The administrative settings form.
 */
function timeago_admin($form, $form_state) {
  $form['info'] = array(
    '#markup' => '<p>' . t('Note that you can set Timeago as the default <a href="!datetime">date format</a>.',
      array('!datetime' => url('admin/config/regional/date-time'))) . ' ' .
      t('This will allow you to use it for all dates on the site, overriding the settings below.') . '</p>',
  );
  $form['timeago_node'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use timeago for node creation dates'),
    '#default_value' => variable_get('timeago_node', 1),
  );
  $form['timeago_comment'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use timeago for comment creation/changed dates'),
    '#default_value' => variable_get('timeago_comment', 1),
  );
  $form['timeago_elem'] = array(
    '#type' => 'radios',
    '#title' => t('Time element'),
    '#default_value' => variable_get('timeago_elem', 'span'),
    '#options' => array(
      'span' => t('span'),
      'abbr' => t('abbr'),
      'time' => t('time (HTML5 only)'),
    ),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_library().
 */
function timeago_library() {
  $path = drupal_get_path('module', 'timeago');
  return array(
    'timeago' => array(
      'title' => t('Time ago'),
      'website' => TIMEAGO_LIBRARY_WEBSITE,
      'version' => '0.11.1',
      'js' => array(
        $path . '/' . TIMEAGO_LIBRARY_FILENAME => array(),
        $path . '/timeago.js' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function timeago_libraries_info() {
  return array(
    'timeago' => array(
      'name' => t('Time ago'),
      'vendor url' => TIMEAGO_LIBRARY_WEBSITE,
      'download url' => TIMEAGO_LIBRARY_DOWNLOAD_URL,
      'version arguments' => array(
        'file' => TIMEAGO_LIBRARY_FILENAME,
        'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@', // e.g. @version 0.10.0
      ),
      'files' => array(
        'js' => array(
          TIMEAGO_LIBRARY_FILENAME => array(),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_date_formats().
 */
function timeago_date_formats() {
  return array(
    array(
      'type' => 'short',
      'format' => TIMEAGO_FORMAT_SHORT_US,
    ),
    array(
      'type' => 'short',
      'format' => TIMEAGO_FORMAT_SHORT,
    ),
    array(
      'type' => 'medium',
      'format' => TIMEAGO_FORMAT_MEDIUM_US,
    ),
    array(
      'type' => 'medium',
      'format' => TIMEAGO_FORMAT_MEDIUM,
    ),
    array(
      'type' => 'long',
      'format' => TIMEAGO_FORMAT_LONG_US,
    ),
    array(
      'type' => 'long',
      'format' => TIMEAGO_FORMAT_LONG,
    ),
  );
}

/**
 * Implements hook_init().
 */
function timeago_init() {
  // Add the Timeago JS to the page if a date format uses Timeago.
  // This is necessary because by the time we render a date it will be too late
  // to add JS to the page.
  $date_types = system_get_date_types();
  foreach ($date_types as $date_type) {
    $format = variable_get('date_format_' . $date_type['type'], '');
    switch ($format) {
      case TIMEAGO_FORMAT_SHORT_US:
      case TIMEAGO_FORMAT_SHORT:
      case TIMEAGO_FORMAT_MEDIUM_US:
      case TIMEAGO_FORMAT_MEDIUM:
      case TIMEAGO_FORMAT_LONG_US:
      case TIMEAGO_FORMAT_LONG:
        timeago_add_js();
        return;
    }
  }
}

/**
 * Implements hook_process_node().
 *
 * We have to use process instead of preprocess because some themes (notably
 * bartik) override $variables['submitted'] in their preprocess implementations
 * which can result in something like "published by admin on 10 minutes ago."
 */
function timeago_process_node(&$variables) {
  if (variable_get('timeago_node', 1)) {
    $node = $variables['node'];
    $variables['date'] = timeago_format_date($node->created, $variables['date']);
    if (variable_get('node_submitted_' . $node->type, TRUE)) {
      $variables['submitted'] = t('Submitted by !username !datetime', array('!username' => $variables['name'], '!datetime' => $variables['date']));
    }
  }
}

/**
 * Implements hook_preprocess_comment().
 */
function timeago_preprocess_comment(&$variables) {
  if (variable_get('timeago_comment', 1)) {
    $comment = $variables['comment'];
    $variables['created'] = timeago_format_date($comment->created, $variables['created']);
    $variables['changed'] = timeago_format_date($comment->changed, $variables['changed']);
    $variables['submitted'] = t('Submitted by !username !datetime', array('!username' => $variables['author'], '!datetime' => $variables['created']));
  }
}

/**
 * Implements hook_token_info().
 */
function timeago_token_info() {
  $return['tokens']['node']['timeago'] = array(
    'name' => t('Created time ago'),
    'description' => t('The amount of time ago the node was created. Uses the Timeago module to display the time dynamically with graceful degredation for non-JS users.'),
  );
  $return['tokens']['comment']['created-timeago'] = array(
    'name' => t('Created time ago'),
    'description' => t('The amount of time ago the comment was created. Uses the Timeago module to display the time dynamically with graceful degredation for non-JS users.'),
  );
  $return['tokens']['comment']['changed-timeago'] = array(
    'name' => t('Created time ago'),
    'description' => t('The amount of time ago the comment was changed. Uses the Timeago module to display the time dynamically with graceful degredation for non-JS users.'),
  );
  return $return;
}

/**
 * Implements hook_tokens().
 */
function timeago_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node']) && isset($tokens['timeago'])) {
    $node = (object) $data['node'];
    $replacements[$tokens['timeago']] = timeago_format_date($node->created);
  }
  if ($type == 'comment' && !empty($data['comment'])) {
    $comment = (object) $data['comment'];
    if (isset($tokens['created-timeago'])) {
      $replacements[$tokens['created-timeago']] = timeago_format_date($comment->created);
    }
    if (isset($tokens['changed-timeago'])) {
      $replacements[$tokens['changed-timeago']] = timeago_format_date($comment->changed);
    }
  }
  return $replacements;
}

/**
 * Overrides the default translation of Timeago dates if necessary.
 */
function timeago_add_js() {
  // Add the Timeago library, the module's helper JS, and the default Drupal
  // translation of Timeago date terms.
  if (module_exists('libraries') && function_exists('libraries_load')) {
    $library_path = libraries_get_path('timeago');
    $path = drupal_get_path('module', 'timeago') . '/timeago.js';
    drupal_add_js($path);
    libraries_load('timeago');
  }
  else {
    $library_path = drupal_get_path('module', 'timeago');
    drupal_add_library('timeago', 'timeago');
  }
  // Some languages (Arabic, Polish, Russian, Ukranian, etc.) have different
  // suffixes depending on the numbers used in the dates, so we may need to
  // have more complex translations than Drupal allows. To support these cases,
  // we allow adding a script that will override the translations. Examples
  // are available at https://gist.github.com/6251.
  $path = $library_path . '/jquery.timeago.' . $GLOBALS['language']->language . '.js';
  if (file_exists($path)) {
    drupal_add_js($path);
  }
}
